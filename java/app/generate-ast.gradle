abstract class AstGenerator extends DefaultTask {
	@Input
	abstract MapProperty<String, List<String>> getAsts()

	@Internal
	final Provider<Directory> outDir

	@Inject
	AstGenerator(ProjectLayout layout) {
		this.outDir = layout.buildDir
			.map { it.dir('generated') }
			.map { it.dir('lox') }
	}

	@TaskAction
	def generateAsts() throws IOException {
		def outputDir = outDir.get()
		outputDir.getAsFile().mkdirs()

		asts.get().each { baseName, types ->
			defineAst(outputDir, baseName, types)
		}
	}

	def defineAst(
		Directory outputDir,
		String baseName,
		List<String> types
	) throws IOException {
		def outputFile = outputDir.file("${baseName}.java").getAsFile()
		outputFile.createNewFile()
		def writer = new PrintWriter(outputFile, 'UTF-8')

		writer.println 'package lox;'
		writer.println ''
		writer.println 'import java.util.List;';
		writer.println ''
		writer.println "abstract class ${baseName} {"

		defineVisitor(writer, baseName, types)

		// AST classes
		types.each { type ->
			def className = type.split(':')[0].trim()
			def fields = type.split(':')[1].trim() as String
			defineType(
				writer,
				baseName,
				className,
				fields
			)
		}

		// The base accept() method
		writer.println()
		writer.println ' abstract <R> R accept(Visitor<R> visitor);'

		writer.println '}'
		writer.close();
	}

	def defineVisitor(
		PrintWriter writer,
		String baseName,
		List<String> types
	) {
		writer.println ' interface Visitor<R> {'

		types.each { type ->
			def typeName = type.split(':')[0].trim()
			writer.println "  R visit${typeName}${baseName}(${typeName} ${baseName.toLowerCase()});"
		}

		writer.println ' }'
	}

	def defineType(
		PrintWriter writer,
		String baseName,
		String className,
		String fieldList
	) {
		writer.println " static class ${className} extends ${baseName} {"

		def fields = fieldList.split(', ')

		// Constructor
		writer.println "  ${className}(${fieldList}) {"
		fields.each { field ->
			def name = field.split(' ')[1];
			writer.println "   this.${name} = ${name};"
		}
		writer.println "  }"

		// Visitor pattern
		writer.println ''
		writer.println '  @Override'
		writer.println '  <R> R accept(Visitor<R> visitor) {'
		writer.println "   return visitor.visit${className}${baseName}(this);"
		writer.println '  }'

		// Fields
		writer.println ""
		fields.each { field ->
			writer.println "  final ${field};"
		}

		writer.println " }"
	}
}

def genAstTask = tasks.register('generateAst', AstGenerator) {
	asts.put('Expr', [
		'Assign : Token name, Expr value',
		'Binary : Expr left, Token operator, Expr right',
		'Call : Expr callee, Token paren, List<Expr> arguments',
		'Get : Expr object, Token name',
		'Grouping : Expr expression',
		'Literal : Object value',
		'Logical : Expr left, Token operator, Expr right',
		'Set : Expr object, Token name, Expr value',
		'This : Token keyword',
		'Unary : Token operator, Expr right',
		'Variable : Token name',
	])

	asts.put('Stmt', [
		'Block : List<Stmt> statements',
		'Class : Token name, Expr.Variable superclass, List<Stmt.Function> methods',
		'Expression : Expr expression',
		'Function : Token name, List<Token> params, List<Stmt> body',
		'If : Expr condition, Stmt thenBranch, Stmt elseBranch',
		'Print : Expr expression',
		'Return : Token keyword, Expr value',
		'Var : Token name, Expr initializer',
		'While : Expr condition, Stmt body',
	])
}

// automatically regenerate AST sources when compiling lox
tasks.getByName('compileJava').dependsOn genAstTask
tasks.getByName('compileTestJava').dependsOn genAstTask
